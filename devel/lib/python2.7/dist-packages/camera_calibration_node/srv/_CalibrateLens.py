"""autogenerated by genpy from camera_calibration_node/CalibrateLensRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CalibrateLensRequest(genpy.Message):
  _md5sum = "df5f0df29ff7353b56dd0a78a901860e"
  _type = "camera_calibration_node/CalibrateLensRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 frameCount
int32 boardWidth
int32 boardHeight

"""
  __slots__ = ['frameCount','boardWidth','boardHeight']
  _slot_types = ['int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       frameCount,boardWidth,boardHeight

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CalibrateLensRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.frameCount is None:
        self.frameCount = 0
      if self.boardWidth is None:
        self.boardWidth = 0
      if self.boardHeight is None:
        self.boardHeight = 0
    else:
      self.frameCount = 0
      self.boardWidth = 0
      self.boardHeight = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3i.pack(_x.frameCount, _x.boardWidth, _x.boardHeight))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.frameCount, _x.boardWidth, _x.boardHeight,) = _struct_3i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3i.pack(_x.frameCount, _x.boardWidth, _x.boardHeight))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.frameCount, _x.boardWidth, _x.boardHeight,) = _struct_3i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3i = struct.Struct("<3i")
"""autogenerated by genpy from camera_calibration_node/CalibrateLensResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CalibrateLensResponse(genpy.Message):
  _md5sum = "2e5027dcc11eaac92a83e7083afdd0a5"
  _type = "camera_calibration_node/CalibrateLensResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 processedFrames

"""
  __slots__ = ['processedFrames']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       processedFrames

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CalibrateLensResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.processedFrames is None:
        self.processedFrames = 0
    else:
      self.processedFrames = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.processedFrames))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.processedFrames,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.processedFrames))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.processedFrames,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
class CalibrateLens(object):
  _type          = 'camera_calibration_node/CalibrateLens'
  _md5sum = '7481f744191744cfb8dcacc5947a34c5'
  _request_class  = CalibrateLensRequest
  _response_class = CalibrateLensResponse
